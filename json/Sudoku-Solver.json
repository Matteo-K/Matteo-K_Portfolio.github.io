{
    "title" : "Sudoku-Solver",
    "lien" : "Sudoku-Solver",
    "depot" : "https://github.com/Matteo-K/Sudoku-Solver",
    "compétence" : [
        2
    ],
    "image" : {
        "lien" : "images/Illustration_project/sudoku-solver.gif",
        "alt" : "illustration Sudoku",
        "title" : "illustration Sudoku"
    },
    "contributeur" : [
        "Raphaël Bardini",
        "Mattéo Kervadec"
    ],
    "date" : "12/2023",
    "presentation" : {
        "image" : {
            "lien" : "images/Illustration_project/grilleSudoku.png",
            "alt" : "apperçu grille de sudoku",
            "title" : "apperçu grille de sudoku"
        },
        "description" : "Réalisation d'un programme qui peut trouver la solution du sudoku.",
        "langage" : [
            "c"
        ],
        "objectifs" : [
            "Résoudre un suddoku.",
            "Résoudre le plus rapidement possible un sudoku."
        ],
        "competence_developpe" : [
            "Optimisation",
            "Analyse d'un problème"
        ]
    },
    "etape" : [
        {
            "titre" : "Résoudre le sudoku",
            "text" : [
                "Au début du projet, on a commencé à faire les techniques classiques de résolution. Telle que le singleton caché, le singleton nu, les paires cachés, ...",
                "Puis on s'est rendu compte qu'on pouvait réaliser les N cachés et les N nus. Ce qui pourrait faire gagner beaucoup de temps."
            ],
            "lien" : [
            ] 
        },
        {
            "titre" : "Optimisation",
            "text" : [
                "Après plusieurs analyse, on s'est rendue compte que la fonction qui était appelée le plus de fois était la fonction de vérification que l'élément peut être placée ou non. Donc on s'est arrangé pour l'optimiser au maximum pour qu'elle atteigne une très basse multiplicité."
            ],
            "lien" : [
            ] 
        }
    ]
}